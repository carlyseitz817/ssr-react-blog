{"version":3,"file":"static/webpack/static/development/pages/postEditorUpdate.js.50978110c1e3e3b506d3.hot-update.js","sources":["webpack:///./pages/postEditorUpdate.js"],"sourcesContent":["import React from 'react';\nimport BaseLayout from '../components/layouts/BaseLayout';\nimport BasePage from '../components/BasePage';\nimport withAuth from '../components/hoc/withAuth';\nimport dynamic from 'next/dynamic';\nimport {Router} from '../routes';\n\nconst CKEditor = dynamic(() => import('../components/CKEditor'), {\n  ssr: false\n});\n\nimport { toast } from 'react-toastify';\n\nimport SaveDraft from '../components/SaveDraft';\nimport StatusButton from '../components/StatusButton';\nimport { getPostById, updatePost } from '../actions';\n\nclass PostEditorUpdate extends React.Component {\n\n  static async getInitialProps({ query }) {\n    const postId = query.id;\n    let post = {};\n\n    try {\n      post = await getPostById(postId);\n      return { post };\n    } catch (err) {\n      console.error(err);\n    }\n\n    return { post };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      title: this.props.post.title,\n      subtitle: this.props.post.subTitle,\n      story: this.props.post.story,\n      // status: this.props.post.status\n      // isSaving: false,\n      // lockId: Math.floor(1000 + Math.random() * 9000)\n    }\n\n    this.updatePost = this.updatePost.bind(this);\n  }\n\n  handletitle = (evt) => this.setState({ title: evt.target.value })\n  handleSubtitle = (evt) => this.setState({ subtitle: evt.target.value })\n\n  updatePost(story) {\n    const { post } = this.props;\n\n    const updatedPost = {};\n    updatedPost.title = this.state.title;\n    updatedPost.subTitle = this.state.subtitle;\n    updatedPost.story = this.state.story;\n\n    // this.setState({isSaving: true});\n\n    updatePost(updatedPost, post._id).then(updatedPost => {\n      toast.success('Post Saved Succesfuly!');\n      // this.setState({isSaving: false});\n    }).catch(err => {\n      // this.setState({isSaving: false});\n      const message = err.message || 'Server Error!';\n      toast.error('Unexpected Error, Copy your progress and refresh browser please.');\n      console.error(message);\n    })\n  }\n\n  changeStatus(status, postId) {\n    console.log(\"status as retrieved in changedStatus(): \" + status)\n    updatePost({ status }, postId)\n      .then(() => {\n        Router.pushRoute(`/blog/${postId}/edit`)\n        toast.success('Post status updated');\n      })\n      .catch(err => {\n        toast.error('Unexpected Error, Copy your progress and refresh browser please.');\n        console.error(err.message);\n      })\n  }\n\n  createStatus(status) {\n    return status === 'draft' ? { view: 'Publish', value: 'published' }\n      : { view: 'Switch to Draft', value: 'draft' };\n  }\n\n  statusOption = (post) => {\n    const status = this.createStatus(post.status)\n\n    return (\n      { \n        text: status.view, \n        handlers: \n          { onClick: () => this.changeStatus(status.value, post._id)}\n      }\n    )\n  }\n\n  render() {\n    const { post } = this.props;\n    // const { isSaving } = this.state;\n    return (\n      <BaseLayout {...this.props.auth}>\n        <BasePage containerClass=\"editor-wrapper\" className=\"blog-editor-page\">\n          <label>Title</label>\n          <input value={this.state.title} onChange={this.handletitle} />\n          <label>Subtitle</label>\n          <input value={post.subTitle} onChange={this.handleSubtitle} />\n          <CKEditor\n            data={post.story}\n            save={this.saveBlog}\n            onInit={editor => {\n              // You can store the \"editor\" and use when it is needed.\n              // console.log('Editor is ready to use!', editor);\n            }}\n            onChange={(event, editor) => {\n              const data = editor.getData();\n              this.setState({ story: data });\n              // console.log({ event, editor, data });\n            }}\n            onBlur={editor => {\n              // console.log('Blur.', editor);\n            }}\n            onFocus={editor => {\n              // console.log('Focus.', editor);\n            }}\n          />\n          <StatusButton item={this.statusOption(post)} />          \n          <SaveDraft\n            onClick={this.updatePost}\n          >\n            Save Draft\n          </SaveDraft>\n        </BasePage>\n      </BaseLayout>\n    )\n  }\n}\n\nexport default withAuth(PostEditorUpdate);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;;;AAGA;AACA;;AADA;AACA;AAAA;AAAA;AACA;;;;AACA;AACA;;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAeA;AAAA;AAAA;AAAA;AACA;AAhBA;AAgBA;AAAA;AAAA;AAAA;AACA;AAjBA;AA0DA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AAjEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAPA;AASA;AAZA;AAaA;AACA;;;AAIA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;AAcA;AAAA;AACA;AADA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAjBA;AAmBA;AAAA;AAEA;AADA;AAQA;;;;AA3HA;AACA;AA6HA;;;;A","sourceRoot":""}